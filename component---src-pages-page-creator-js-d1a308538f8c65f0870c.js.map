{"version":3,"sources":["webpack:///./src/pages/page-creator.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2__","a","createElement","charSet","to"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAAAG,EAAAN,EAAA,IAAAO,EAAAP,EAAAK,EAAAC,GAAAE,EAAAR,EAAA,KAoIeE,EAAA,0BACbE,EAAAK,EAAAC,cAAA,WACEN,EAAAK,EAAAC,cAACF,EAAA,OAAD,KACEJ,EAAAK,EAAAC,cAAA,QAAMC,QAAQ,UACdP,EAAAK,EAAAC,cAAA,2BAGFN,EAAAK,EAAAC,cAACH,EAAAE,EAAD,CAAMG,GAAG,KAAT","file":"component---src-pages-page-creator-js-d1a308538f8c65f0870c.js","sourcesContent":["import React from \"react\"\nimport Link from \"gatsby-link\"\nimport { Helmet } from \"react-helmet\"\n\n// import { createSchemaModel, ISchemaProps } from \"ide-tree\"\n// // import { schemaConverter, ESchemaOrigin } from \"ide-component-tree\"\n// import { debounce } from \"ts-debounce\"\n// import { schema as newSchemajson } from \"../datas/new-schema.js\"\n\n// import {\n//   PageCreatorFactory,\n// } from \"page-creator-ide\"\n\n// const schemaJSONv2 = {};//schemaConverter(newSchemajson.components)\n\n// const schema = createSchemaModel(schemaJSONv2)\n\n// const onExpand = function(keys) {\n//   // console.log(888, keys);\n// }\n\n// const onSelectNode = node => {\n//   console.log(\"当前选中的 node:\", node.id, node.name)\n// }\n\n// /**\n//  * context menu 部分\n//  */\n// const menu = {\n//   id: \"component-tree\",\n//   name: \"组件树右键菜单\",\n//   children: [\n//     { id: \"createSub\", name: \"添加组件\", icon: \"plus\", shortcut: \"⌘+Alt+G\" },\n//     // { id: 'createTmpl', name: '添加模板', icon: 'plus', shortcut: '' },\n//     { id: \"createUp\", name: \"前面插入组件\", icon: \"arrow-up\", shortcut: \"\" },\n//     {\n//       id: \"createDown\",\n//       name: \"后面插入组件\",\n//       icon: \"arrow-down\",\n//       shortcut: \"\",\n//     },\n//     {\n//       id: \"divider\",\n//       name: \"分割线\",\n//       icon: \"file\",\n//       type: \"separator\",\n//     },\n//     { id: \"copy\", name: \"复制\", icon: \"copy\", shortcut: \"⌘+C\" },\n//     { id: \"paste\", name: \"粘贴\", icon: \"switcher\", shortcut: \"⌘+V\" },\n//     {\n//       id: \"divider\",\n//       name: \"分割线\",\n//       icon: \"file\",\n//       type: \"separator\",\n//     },\n//     { id: \"delete\", name: \"删除\", icon: \"delete\", shortcut: \"⌘+Delete\" },\n//   ],\n// }\n\n// const { PageCreatorWithStore, client } = PageCreatorFactory()\n\n// function onClick(value) {\n//   console.log(\"当前点击：\", value)\n// }\n\n// function onRightClick({ node, event }) {\n//   console.log(\"onRightClick...\")\n// }\n\n// function onSwitchWithClient(panel, index) {\n//   console.log(\"[with client]当前点击：\", panel, index)\n//   // client.put('/clients/switchPanel/clients/codeEditor/editor', {\n//   //   name: 'value',\n//   //   value: `${index}: panel name: ${panel.id}`\n//   // });\n// }\n// // 经过 debounce 处理的函数，提高性能\n// const schemaModelChange = debounce(\n//   (key, value) => {\n//     if (key === \"schema\") {\n//       const result = value.schemaJSON ? value.schemaJSON : value\n//       console.log(777, \"schema changed:\", key)\n\n//       // 更改 ide 的内容\n//       client.put(\"/clients/switchPanel/clients/codeEditor/editor\", {\n//         name: \"value\",\n//         value: JSON.stringify(result.children, null, 4),\n//       })\n\n//       // 然后传递数据给 iframe\n//       newSchemajson.components = result.children\n//       client.put(\"/clients/switchPanel/clients/previewer/iframe\", {\n//         name: \"data\",\n//         value: {\n//           event: \"data-from-ide\",\n//           type: \"updateSchema\",\n//           data: newSchemajson,\n//         },\n//       })\n//     }\n//   },\n//   400,\n//   {\n//     isImmediate: true,\n//   }\n// )\n\n// const componentTree = {\n//   schemaTree: {\n//     onSelectNode: onSelectNode,\n//     onRightClickNode: onRightClick,\n//     onModelChange: schemaModelChange,\n//     onExpand,\n//   },\n// }\n\n// const switchPanel = {\n//   onSwitch: onSwitchWithClient,\n//   codeEditor: {\n//     language: \"json\",\n//   },\n//   previewer: {\n//     url: \"http://localhost:9006/gourd2/pi/demo/index.html?from=ide\",\n//   },\n// }\n\n// // 创建组件树和右键菜单\n// client.post(\"/clients/componentTree/clients/schemaTree/tree\", {\n//   schema: schema,\n// }) // 注意这里的 schema 需要用 createSchemaModel 转换一层，否则因为缺少 parentId ，导致无法创建成功\n// client.post(\"/clients/componentTree/clients/contextMenu/menu\", { menu: menu })\n\nexport default () => (\n  <div>\n    <Helmet>\n      <meta charSet=\"utf-8\" />\n      <title>页面可视化搭建平台</title>\n    </Helmet>\n\n    <Link to=\"/\">back home</Link>\n    {/* <PageCreatorWithStore\n      componentTree={componentTree}\n      switchPanel={switchPanel}\n      onClick={onClick}\n    /> */}\n  </div>\n)\n"],"sourceRoot":""}